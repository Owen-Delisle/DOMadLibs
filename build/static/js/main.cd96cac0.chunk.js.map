{"version":3,"sources":["assets/DOMadLipsIcon.png","actions/Word-Actions.js","common/LocalStorage.js","components/Form/Form.js","common/Utils.js","App.js","serviceWorker.js","index.js","reducers/Word-Reducer.js"],"names":["module","exports","__webpack_require__","p","UPDATE_WORD","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","word","wordToChange","handleChange","bind","assertThisInitialized","handleSubmit","onUpdateWord","callback","_this2","tab","chrome","runtime","sendMessage","tabId","id","msg","type","tabs","query","active","currentWindow","sendData","event","setState","defineProperty","target","name","value","react_default","a","createElement","className","onChange","onClick","localStorage","clear","err","console","log","resetState","Component","mapActionsToProps","payload","connect","App","subWords","src","icon","components_Form_Form","Boolean","window","location","hostname","match","allReducers","combineReducers","arguments","length","undefined","_ref","concat","toConsumableArray","persistedState","serializedState","getItem","JSON","parse","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd96cac0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DOMadLipsIcon.e03b30ed.png\";","export const UPDATE_WORD = \"word:updateWord\";\n\nexport function updateWord(word, wordToChange) {\n  return {\n    type: UPDATE_WORD,\n    payload: {\n      word: word,\n      wordToChange: wordToChange\n    }\n  };\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.log(\"LOAD ERR\", err);\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (err) {\n    console.log(\"ERROR from local storage save state\", err);\n  }\n};\n\nexport const resetState = () => {\n  try {\n    localStorage.clear();\n  } catch (err) {\n    console.log(\"ERROR from local storage save state\", err);\n  }\n};\n","/*global chrome*/\n\nimport React, { Component } from \"react\";\nimport { getCurrentTab } from \"../../common/Utils\";\n\nimport { connect } from \"react-redux\";\nimport { updateWord } from \"../../actions/Word-Actions\";\nimport { resetState } from \"../../common/LocalStorage\";\nimport \"./styles.css\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: \"\",\n      wordToChange: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onUpdateWord = this.onUpdateWord.bind(this);\n  }\n\n  sendData() {\n    getCurrentTab(tab => {\n      chrome.runtime.sendMessage({\n        tabId: tab.id,\n        msg: {\n          word: this.props.word\n        },\n        type: \"formsend\"\n      });\n    });\n  }\n\n  handleSubmit() {\n    this.sendData();\n  }\n\n  onUpdateWord() {\n    this.sendData();\n    this.props.onUpdateWord(this.state.word, this.state.wordToChange);\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n    return (\n      <form className=\"Form\">\n        <h3>Change</h3>\n        <input type=\"text\" name=\"word\" onChange={this.handleChange} />\n        <h3>To</h3>\n        <input type=\"text\" name=\"wordToChange\" onChange={this.handleChange} />\n        <br />\n        <h2 onClick={this.onUpdateWord}>ADD</h2>\n        <h2 onClick={() => resetState()}>RESET</h2>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  word: state.word\n});\n\nconst mapActionsToProps = { onUpdateWord: updateWord };\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps\n)(Form);\n","/*global chrome*/\nexport function getCurrentTab(callback) {\n  chrome.tabs.query(\n    {\n      active: true,\n      currentWindow: true\n    },\n    tabs => {\n      callback(tabs[0]);\n    }\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form/Form\";\nimport icon from \"./assets/DOMadLipsIcon.png\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subWords: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">\n            <img className=\"Image\" src={icon} />\n            DOMadLibs\n          </h1>\n          <Form />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*global chrome*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { combineReducers, createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport wordReducer from \"./reducers/Word-Reducer\";\nimport { loadState, saveState } from \"./common/LocalStorage\";\n\nconst allReducers = combineReducers({\n  word: wordReducer\n});\n\nconst persistedState = loadState();\n\nconst store = createStore(allReducers, persistedState);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","import { UPDATE_WORD } from \"../actions/Word-Actions\";\n\nexport default function wordReducer(state = \"\", { type, payload }) {\n  switch (type) {\n    case UPDATE_WORD:\n      return [\n        ...state,\n        { word: payload.word, wordToChange: payload.wordToChange }\n      ];\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""}